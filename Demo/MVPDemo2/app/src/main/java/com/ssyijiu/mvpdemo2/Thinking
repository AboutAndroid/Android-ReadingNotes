1. 使用单例来管理 Model
        Presenter 不能使用单例
        否则一个 detachView(attachView) 后，所有的复用的都被 detachView(attachView)。

        Presenter<View> 的复用，意味着 View 的复用 -> 某一逻辑的复用 eg: 获取金价

2. [废弃]Presenter 是 static 的，在创建的时候初始化数据
3. [废弃]Activity 意外重启 Presenter 并不销毁，会和 Activity 重新绑定，数据不会再次被初始化
4. Activity 销毁，Presenter 会跟随销毁
5. 将 model 接口添加到谷歌的契约类
6. MvpListener -> DefaultMvpListener
   原本这个回调是负责 M 和 P 的通信
   现在却在 M 出现异常时 直接 通知 V

需要解决：
1.  if(getView != null)
2.  在 activity 意外重启时，如何根据 presenter 的数据恢复 activity 状态
3. MvpListener 的泛型需要声明两次，调用的时候还要写一次，有没有好的方法就写一次


谷歌的契约类需要吗？
需要
这样在 Contract 中可以一目了然的看清 M 请求的接口 V 展示的数据
增加删除方法也可以统一的处理，避免出错

P 的复用实际是一套 M V P 的复用
（每个模块）可以写一个复用的 Contract ，将所有复用的的方法放在里面




纸上得来终觉浅，需要实际项目的验证与优化。

如何写好分清 M V P

1.  model为上层提供数据，model处理上层传递来的数据

    数据的解析，数据的存储，数据的分发，数据的增删改查等操作
    凡是涉及到数据的操作都要放在model中

2.  view (xml/activity/iview) 负责展示数据

3.  presenter
    不是 model、view 层的代码都写在 presenter



谷歌mvp
http://blog.csdn.net/u011459799/article/details/51360882
