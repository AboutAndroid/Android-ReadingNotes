单态设计模式， 就是采取一定的方法保证在整个的软件系统中， 对某个类只能存在一个对象实例，
并且该类只提供一个取得其对象实例的方法

所谓“懒汉式”与“饿汉式”的区别，是在与建立单例对象的时间的不同。

“懒汉式”是在你真正用到的时候才去建这个单例对象（实例的延迟加载）

“饿汉式”是在不管你用的用不上，一开始就建立这个单例对象

从速度和反应时间角度来讲，非延迟加载（又称饿汉式）好；从资源利用效率上说，延迟加载（又称懒汉式）好。
饿汉式：类加载的时候就创建实例， 线程安全。

class Single{
       private static final Single s = new Single();  // final变量不能被赋值，s终身指向一个固定的Single实例
       private Single(){}
       public static Single getInstance(){
             return s ;
      }
}

懒汉式：延迟加载，非线程安全。
class Single
{
     private static Single s = null;
     private Single(){}
     public static  Single getInstance()
     {
          if(s==null)

             s = new Single();
          }
          return s;
     }
}

双检锁：
class Single
{
     private volatile static Single s = null;
     private Single(){}
     public static  Single getInstance()
     {
          if(s==null)
          {
               synchronized(Single.class)
               {
                    if(s==null)
                        s = new Single();
               }
          }
          return s;
     }
}

静态内部类：延迟加载，线程安全。

类级的内部类，也就是静态的成员式内部类，该内部类的实例与外部类的实例没有绑定关系，而且只有被使用时才会装载，从而实现了延迟加载。

一个类直到被使用时才被加载和初始化，而这个过程是线程安全的。

public class Single {

    private Single(){}

    private static class LazyHolder {

        private static final Single INSTANCE = new Single();

    }

    public static Single getInstance()
    {

        return LazyHolder.INSTANCE;

    }

}

枚举：非延迟加载，线程安全，绝对防止多次实例化，即使在面对复杂的序列化或者反射攻击的时候
enum Single {
    INSTANCE ;
}
